{
  
    
        "post0": {
            "title": "Data",
            "content": "This project is built on three sources of data. A detailed description of each dataset will be described in the following three sections. . Game Of Thrones Wikipage . The first data source are Game Of Thrones Wikipage, where it was possible to extract the data using their API. The Wikipage contains a section describing each season of the series, where this text contained information of characters being involved in each series. Through the use of regular expressions it was possible to extract characters present in each season. Having extracted the characters present in the series we could again utilize the API to extract and gather information about each character and save this locally. . An example can be seen here: link to charaacter page. Information included in a character page are an image of the character, some basic information including: seasons where the character are present, religion, allegiance, culture, family information, status ie. whether the character are dead or alive. It should be noted that the available information can vary between the characters. . Further information are bibliography, family tree etc. but again it should be noted that the available information can vary heavily. The character pages can be used to find interactions between the characters, but also gather basic information about each character. . The wikipage was used to gather information about each character ie. basic stats such as religion, status, appearances, allegiance but also interactions between the characters. This will be further explained and investigated in the coming pages. Further are the character pages used to investigate words used by the character and also the sentiment. . Another approach could be to investigate all the possible wikipages, but this would involve scraping 4723 pages (at the moment), where a lot of these pages are describing scenes, places and eg. religions, which is not important information about the characters. . The extracted data from the wikipages can be downloaded here. The code used to extract information from the wikipages can be found in the Explainer Notebook. . Character dialogoues . The second data source are character dialogoues which can be found here link. The character dialogoues are based on transcripts, and as all transcripts are not freely available some of them are created by fans. The data are divived into dialogoues for each episode and further which character is speaking. . The data are already cleaned and are ready to use. The data are used for text- and sentiment analysis later in this project. . IMDB data . The last data source are reviews and ratings from the IMDB database. The data are extracted using a python package IMDbPY, which contains the average ratings of each episode based on the IMDB database. The ratings does also contain demographic information such as the age and gender of the ratings. . It is also possible to extract reviews of each episode but only a limited amount of reviews can be extracted for each episode namely 25 as maximum. Another approach could be to scrape the IMDB website, but according to the IMDB webpage this is illegal. Therefore the limited amount of reviews pr. episode are used. The reviews also contain a time-stamp, user-id and rating, but these ratings does not appear to be correct as these are either 0 or 1, which does not correspond to the either the average ratings of the episodes or the text corresponding to the ratings. . The idea is to investigate whether the reivewers text correspond with the average rating of the episodes and also whether the ratings/reviews changes throughout the season/episodes. This is also wished to compare with the sentiments of the character, but more on this later in the project. . The gathered data can be found here [link]. . &lt;/img&gt; Created in Deepnote .",
            "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/data/2021/11/27/_Data.html",
            "relUrl": "/data/2021/11/27/_Data.html",
            "date": " • Nov 27, 2021"
        }
        
    
  
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Data",
          "content": "This project is built on three sources of data. A detailed description of each dataset will be described in the following three sections. . Game Of Thrones Wikipage . The first data source are Game Of Thrones Wikipage, where it was possible to extract the data using their API. The Wikipage contains a section describing each season of the series, where this text contained information of characters being involved in each series. Through the use of regular expressions it was possible to extract characters present in each season. Having extracted the characters present in the series we could again utilize the API to extract and gather information about each character and save this locally. . An example can be seen here: link to charaacter page. Information included in a character page are an image of the character, some basic information including: seasons where the character are present, religion, allegiance, culture, family information, status ie. whether the character are dead or alive. It should be noted that the available information can vary between the characters. . Further information are bibliography, family tree etc. but again it should be noted that the available information can vary heavily. The character pages can be used to find interactions between the characters, but also gather basic information about each character. . The wikipage was used to gather information about each character ie. basic stats such as religion, status, appearances, allegiance but also interactions between the characters. This will be further explained and investigated in the coming pages. Further are the character pages used to investigate words used by the character and also the sentiment. . Another approach could be to investigate all the possible wikipages, but this would involve scraping 4723 pages (at the moment), where a lot of these pages are describing scenes, places and eg. religions, which is not important information about the characters. . The extracted data from the wikipages can be downloaded here. The code used to extract information from the wikipages can be found in the Explainer Notebook. . Character dialogoues . The second data source are character dialogoues which can be found here link. The character dialogoues are based on transcripts, and as all transcripts are not freely available some of them are created by fans. The data are divived into dialogoues for each episode and further which character is speaking. . The data are already cleaned and are ready to use. The data are used for text- and sentiment analysis later in this project. . . IMDB data . The last data source are reviews and ratings from the IMDB database. The data are extracted using a python package IMDbPY, which contains the average ratings of each episode based on the IMDB database. The ratings does also contain demographic information such as the age and gender of the ratings. . It is also possible to extract reviews of each episode but only a limited amount of reviews can be extracted for each episode namely 25 as maximum. Another approach could be to scrape the IMDB website, but according to the IMDB webpage this is illegal. Therefore the limited amount of reviews pr. episode are used. The reviews also contain a time-stamp, user-id and rating, but these ratings does not appear to be correct as these are either 0 or 1, which does not correspond to the either the average ratings of the episodes or the text corresponding to the ratings. . The idea is to investigate whether the reivewers text correspond with the average rating of the episodes and also whether the ratings/reviews changes throughout the season/episodes. This is also wished to compare with the sentiments of the character, but more on this later in the project. . The gathered data can be found here [link]. . .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/data/",
          "relUrl": "/data/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Basic Statistics",
          "content": "This part of the webpage are used to give a further introduction to the data used for analysis in this project. The Data introduces the basics of the data, whereas this page will dive further in to what the data contains and some of its properties. A full analysis can be found in the Explainer Notebook. . This page will contain three parts: firstly, properties of the Game Of Thrones network are presented, secondly properties of the dialogoues are presented and lastly the reviews and ratings from IMDB. . Game Of Thrones Network . This part are used to introduce properties of the data used for network analysis of the data especially there are focus on the properties of the characters namely their religion, allegiance, culture, number of appearances in the series and status ie. whether they are dead or alive at the end of the series. . The network data contains 224 characters, which is found by scraping the gameofthrones.fandom.com webpage. Each character has been assigned a number of attributes namely relgion, allegiance, culture, status ie. whether the character is dead or alive and lastly the number of appearances the character has through the series. . We will start out by investigating how the characters are distributed across these attributes, are some of groups of each attribute more frequent than others. This is going to be presented in interactive figures where the categories of each attribute can be selected and deselected by clicking these on and off. If ones want to only investigate one category this can be done by double-clicking the category of interest. . Let&#39;s start out with how the characters distribute across the different religions. . . . From this it is apparent that a lot of the characters does not have a known religion, which is the majority of the characters, but if we toggle this of, we can see that the majority of the characters are part of Faith of The Seven and Old Gods of the Forest. On the other side it should be noted that the least frequent religions are White Walkers and Ghiscari religion. From the basic knowledge of the Game Of Thrones universe it also makes sense that the two most popular religions are Faith of The Seven and Old Gods of the Forest as the The Seven Kingdoms are practicing the Faith of the Seven whereas the people in the North are practicing the Old Gods of the Forest. . Further it should be noted that the the Game Of Thrones universe contains 8 different religions based on the Wiki pages. . Next, we are going to investigate the frequencies of the different allegiances. The allegiances are a strong factor in Game Of Thrones as this has a large effect in the wars, and how people interact. How the different houses talk and interact are strongly affected by the allegiances. Some allegiances are known to be hostile to each other such as the House of Stark and House of Lannister. But also House Baratheon of King&#39;s Landing are known to be very hostile against House Targaryen, and these two Houses are known to be in war due to past history where the Mad King did kill people for fun. . . . Again, some of the characters does not have an associated allegiance. The two most frequent allegiances are House Stark and Hose Lannister, followed by Night&#39;s Watch and House Targaryen. These allegiances are also the main allegiances in Game Of Thrones and further also the allegiances of the main characters in the series. . House Lannister has characters as Cersei, Jamie and Tyrion whereas House Stark has Robb, Bran and the bastard Jon Snow. Jon Snow is one of the series most well known character which is also part of the Night&#39;s Watch, and the the Night&#39;s Watch are playing a big role later in the series when the battle against the White Walkers are happening. Lastly, House Targaryen are a house which is beaten down but as the series are evolving Daenerys are becoming a larger player in the universe as she conquers the world part by part. . The characters are not only divided into allegiances, but also cultures, which has shown to be important. The people in the North are helping each other out even though they are not part of the same allegiance. . . . From the above figure it can be seen that the most prominent culture are Andals followed by Northmen, again a large group has a unknown culture. From this it is apparent that most of the characters are found in the Andals and Northmen cultures, and makes the majority of the Game Of Thrones universe. Further, it should be noted that the universe contains a lot of small cultures such Children of the Forest. . The Andals are the people who invaded Westeros in the beginning of the universe, and are the dominant group. The Northmen are also a big cultural group defined by all the characters living in the North of the Game Of Thrones world. The Children of the Forest are a small group of characters which are presented fairly late in the series. They are small non-human characters, and should be the original people of Westeros. Further it should be noticed that the network contains a lot of different cultures. . It is further investigated how many of the characters that die through the series. We start out with 224 characters, and end up with only 30 characters being alive, whereas 8 is uncertain and 2 unkown. . This means that 121 characters dies throughout the series, and anyone who has seen the series would be able to confirm that a lot of characters die as the series progresses. In the figure below the distribution of the characters status can be seen. . . . Next we will dive into the last attribute for each character in the network, namely how many appearances the character has throughout the series. This will give us indication how often we in general will see a character but also present if there are any strict patterns. . . . Again, a lot of characters do not have this attribute on their character page, and these observations have been omitted in the figure above. We can see that the majority of the characters only appear a couple of times ie. below 10-15 apperances. This would make sense as a lot of the characters are not main characters and therefore only appear in a season or likewise. We can further see a little group around 40 appearances and 60 appearances which could indicate we have a little group of characters appearing in most episodes, which would be expected as the series have a couple of main characters. . Character dialogoues . Next we dive into the character dialogoues which are extracted from transcripts, this dataset contains dialogoues from all characters in the season, and this is based on another dataset than in the previous part of this page. Therefore we restrict the data to only contain data for the characters that are present in the network used for analysis in Text Analysis. . Originally the data contains 817 characters and the original dataset can be found here transcripts [ref]. . We are going to investigate how many episodes and series does each character appear in and also what is the average token length ie. how much dialogoue are present for each character as the dialogoue length could indicate the importance of a character. This is thought as a good approximation, as a character with a lot of dialogoue probably also are present a lot in the series and this could indicate the importance of the character. . . . From the figure above we can see that Tyrion Lannister clearly are the character with the longest dialogoue, which for anyone who has seen the series knows that Tyrion talks a lot and likes to talk. Next we can see that Jon Snow, Cersei Lannister and Daenerys Targaryen also has a lot of dialogoue. This makes sense as these three are part of the main characters, and appear in a lot of episodes. . Next we will dive into the characters appearances in seasons but also episodes, this is done by finding the episodes and series where they have some diaologoue and use this as indications of appearance. . . . From the figure above it can be seen that a lot of characters are present in all 8 season such as: Jon Snow, Sansa Stark, Tyrion Lannister, Bronn and Samwell Tarly and again this is expected as these characters are part of the key characters. On the other side a lot of characters are only present in 1 season such as Syrio Forel which is Arya Starks &quot;dancing teacher&quot; when she moves to King&#39;s Landing. . We will now investigate the appearance on episode level as this can give a more fine coarsed description of the character presence. . . . From this we can see that the character which appear in most episodes are Tyrion Lannister followed by Jon Snow, Sansa Stark, Daenerys Targaryen which makes perfect sense as these characters are main characters. Only a couple of characters are present only ones which clearly would indicate they had a small role in the Game Of Thrones plot. . Reviews and ratings . Lastly we will dive into the data from IMDB, where ratings and reviews are extracted. Here we will investigate how the rating distribution are in general, but also how it is distributed when taking the average rating pr. episode but also pr. season. . We will start out by looking at the average rating pr. season. From the figure below we can see that season 1 through season 7 have almost the same average rating, whereas season 8 clearly sticks out with a low score. Further it should be noticed that season 4 has the highest average rating of 9.31 which is quite high as the highest IMDB score are 10. Further it should be noticed that the season in general has a high average rating. . Season 8 having the lowest score does not come as a surprise as a lot of people were unhappy with the ending of the series, and a lot of people did feel that they just ended the series to quick. . . . Next we will look at the average rating pr. episode, to see if we could find any patterns. From the figure below we see approximately the same pattern as above, but we can now see that often the last 2 episodes in a season do achieve a higher average score compare to the middle episodes. Further it should be noticed that from the beginning of season 8 the episodes do keep getting lower average score, and the last episode in season 8 do achieve a quite low score of only 4. . . . what are the average review length . . . . . We will dive into the demographics of the reviewers of Game Of Thrones, to see if a specific group of people watch the series, as this could help us understand any patterns and let us dive deeper into the case. . The figure below shows the distribution of number of votes across 4 age groups and gender. From this it can be seen that males do vote more the females, and also the largest age is age 30-44 whereas the smallest are aged under 18. . . . We could now look into how the average rating was distributed across gender and age. From the figure below it can be seen that males across all age groups give approximately the same high average rating, whereas females in the age group under 18, give the lowest average rating. It should be noted that this age groups also was the smallest, so this score can easily be affected by fewer people giving low average rating compared to the other groups. . . . We have now investigated the data used in this project. How the attributes of the characters are distributed, and dived a little further into the Game Of Thrones universe. We have investigated the dialogoue of the character from transcripts, and seen how many episodes and seasons these characters are present, and further what their average dialogoue length was. Lastly, we have dived into the basics of the voters for the series, how the demographics of the voters were and their average rating. .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/02_Basic_Statistics/",
          "relUrl": "/02_Basic_Statistics/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Game Of Thrones Network",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/GameOfThronesNetwork/",
          "relUrl": "/GameOfThronesNetwork/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Text Analysis",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/textanalysis/",
          "relUrl": "/textanalysis/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Community Analysis",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/CommunityAnalysis/",
          "relUrl": "/CommunityAnalysis/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "TODO",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/TODO/",
          "relUrl": "/TODO/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}