{
  
    
        "post0": {
            "title": "Data",
            "content": "This project is built on three sources of data. A detailed description of each dataset will be described in the following three sections. . Game Of Thrones Wikipage . The first data source are Game Of Thrones Wikipage, where it was possible to extract the data using their API. The Wikipage contains a section describing each season of the series, where this text contained information of characters being involved in each series. Through the use of regular expressions it was possible to extract characters present in each season. Having extracted the characters present in the series we could again utilize the API to extract and gather information about each character and save this locally. . An example can be seen here: link to charaacter page. Information included in a character page are an image of the character, some basic information including: seasons where the character are present, religion, allegiance, culture, family information, status ie. whether the character are dead or alive. It should be noted that the available information can vary between the characters. . Further information are bibliography, family tree etc. but again it should be noted that the available information can vary heavily. The character pages can be used to find interactions between the characters, but also gather basic information about each character. . The wikipage was used to gather information about each character ie. basic stats such as religion, status, appearances, allegiance but also interactions between the characters. This will be further explained and investigated in the coming pages. Further are the character pages used to investigate words used by the character and also the sentiment. . Another approach could be to investigate all the possible wikipages, but this would involve scraping 4723 pages (at the moment), where a lot of these pages are describing scenes, places and eg. religions, which is not important information about the characters. . The extracted data from the wikipages can be downloaded here. The code used to extract information from the wikipages can be found in the Explainer Notebook. . Character dialogoues . The second data source are character dialogoues which can be found here link. The character dialogoues are based on transcripts, and as all transcripts are not freely available some of them are created by fans. The data are divived into dialogoues for each episode and further which character is speaking. . The data are already cleaned and are ready to use. The data are used for text- and sentiment analysis later in this project. . IMDB data . The last data source are reviews and ratings from the IMDB database. The data are extracted using a python package IMDbPY, which contains the average ratings of each episode based on the IMDB database. The ratings does also contain demographic information such as the age and gender of the ratings. . It is also possible to extract reviews of each episode but only a limited amount of reviews can be extracted for each episode namely 25 as maximum. Another approach could be to scrape the IMDB website, but according to the IMDB webpage this is illegal. Therefore the limited amount of reviews pr. episode are used. The reviews also contain a time-stamp, user-id and rating, but these ratings does not appear to be correct as these are either 0 or 1, which does not correspond to the either the average ratings of the episodes or the text corresponding to the ratings. . The idea is to investigate whether the reivewers text correspond with the average rating of the episodes and also whether the ratings/reviews changes throughout the season/episodes. This is also wished to compare with the sentiments of the character, but more on this later in the project. . The gathered data can be found here [link]. . &lt;/img&gt; Created in Deepnote .",
            "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/data/2021/11/30/_Data.html",
            "relUrl": "/data/2021/11/30/_Data.html",
            "date": " • Nov 30, 2021"
        }
        
    
  
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Data",
          "content": "This project is built on three sources of data. A detailed description of each dataset will be described in the following three sections. . Game Of Thrones Wikipage . The first data source are Game Of Thrones Wikipage, where it was possible to extract the data using their API. The Wikipage contains a section describing each season of the series, where this text contained information of characters being involved in each series. Through the use of regular expressions it was possible to extract characters present in each season. Having extracted the characters present in the series we could again utilize the API to extract and gather information about each character and save this locally. . An example can be seen here: link to character page. Information included in a character page are an image of the character, some basic information including: seasons where the character are present, religion, allegiance, culture, family information, status ie. whether the character are dead or alive. It should be noted that the available information can vary between the characters. . Further information are bibliography, family tree etc. but again it should be noted that the available information can vary heavily. The character pages can be used to find interactions between the characters, but also gather basic information about each character. . The wikipage was used to gather information about each character ie. basic stats such as religion, status, appearances, allegiance but also interactions between the characters. This will be further explained and investigated in the coming pages. Further are the character pages used to investigate words used by the character and also the sentiment. . Another approach could be to investigate all the possible wikipages, but this would involve scraping 4723 pages (at the moment), where a lot of these pages are describing scenes, places and eg. religions, which is not important information about the characters. . The extracted data from the wikipages can be found here the text for each character across all season can be downloaded using this link which is raw text and the initial cleaned text here. Extracted data on seasonal level can be found here. . The code used to extract information from the wikipages can be found in the Explainer Notebook. . Character dialogoues . The second data source are character dialogoues which can be found here link. The character dialogoues are based on transcripts, and as all transcripts are not freely available some of them are created by fans. The data are divived into dialogoues for each episode and further which character is speaking. . The data are already cleaned and are ready to use. The data are used for text- and sentiment analysis later in this project. . . IMDB data . The last data source are reviews and ratings from the IMDB database. The data are extracted using a python package IMDbPY, which contains the average ratings of each episode based on the IMDB database. The ratings does also contain demographic information such as the age and gender of the ratings. . It is also possible to extract reviews of each episode but only a limited amount of reviews can be extracted for each episode namely 25 as maximum. Another approach could be to scrape the IMDB website, but according to the IMDB webpage this is illegal. Therefore the limited amount of reviews pr. episode are used. The reviews also contain a time-stamp, user-id and rating, but these ratings does not appear to be correct as these are either 0 or 1, which does not correspond to the either the average ratings of the episodes or the text corresponding to the ratings. . The idea is to investigate whether the reivewers text correspond with the average rating of the episodes and also whether the ratings/reviews changes throughout the season/episodes. This is also wished to compare with the sentiments of the character, but more on this later in the project. . The gathered data can be found here link. . . All data used for creating network and perform text analysis can be found in this folder. . &lt;/img&gt; Created in Deepnote .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/data/",
          "relUrl": "/data/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Basic Statistics",
          "content": "This part of the webpage are used to give a further introduction to the data used for analysis in this project. The Data introduces the basics of the data, whereas this page will dive further in to what the data contains and some of its properties. A full analysis can be found in the Explainer Notebook. . This page will contain three parts: firstly, properties of the Game Of Thrones network are presented, secondly properties of the dialogoues are presented and lastly the reviews and ratings from IMDB. . Game Of Thrones Network . This part are used to introduce properties of the data used for network analysis of the data especially there are focus on the properties of the characters namely their religion, allegiance, culture, number of appearances in the series and status ie. whether they are dead or alive at the end of the series. . The network data contains 224 characters, which is found by scraping the gameofthrones.fandom.com webpage. Each character has been assigned a number of attributes namely relgion, allegiance, culture, status ie. whether the character is dead or alive and lastly the number of appearances the character has through the series. . We will start out by investigating how the characters are distributed across these attributes, are some of groups of each attribute more frequent than others. This is going to be presented in interactive figures where the categories of each attribute can be selected and deselected by clicking these on and off. If ones want to only investigate one category this can be done by double-clicking the category of interest. . Let&#39;s start out with how the characters distribute across the different religions. . . . From this it is apparent that a lot of the characters does not have a known religion, which is the majority of the characters, but if we toggle this of, we can see that the majority of the characters are part of Faith of The Seven and Old Gods of the Forest. On the other side it should be noted that the least frequent religions are White Walkers and Ghiscari religion. From the basic knowledge of the Game Of Thrones universe it also makes sense that the two most popular religions are Faith of The Seven and Old Gods of the Forest as the The Seven Kingdoms are practicing the Faith of the Seven whereas the people in the North are practicing the Old Gods of the Forest. . Further it should be noted that the the Game Of Thrones universe contains 8 different religions based on the Wiki pages. . Next, we are going to investigate the frequencies of the different allegiances. The allegiances are a strong factor in Game Of Thrones as this has a large effect in the wars, and how people interact. How the different houses talk and interact are strongly affected by the allegiances. Some allegiances are known to be hostile to each other such as the House of Stark and House of Lannister. But also House Baratheon of King&#39;s Landing are known to be very hostile against House Targaryen, and these two Houses are known to be in war due to past history where the Mad King did kill people for fun. . . . Again, some of the characters does not have an associated allegiance. The two most frequent allegiances are House Stark and Hose Lannister, followed by Night&#39;s Watch and House Targaryen. These allegiances are also the main allegiances in Game Of Thrones and further also the allegiances of the main characters in the series. . House Lannister has characters as Cersei, Jamie and Tyrion whereas House Stark has Robb, Bran and the bastard Jon Snow. Jon Snow is one of the series most well known character which is also part of the Night&#39;s Watch, and the the Night&#39;s Watch are playing a big role later in the series when the battle against the White Walkers are happening. Lastly, House Targaryen are a house which is beaten down but as the series are evolving Daenerys are becoming a larger player in the universe as she conquers the world part by part. . The characters are not only divided into allegiances, but also cultures, which has shown to be important. The people in the North are helping each other out even though they are not part of the same allegiance. . . . From the above figure it can be seen that the most prominent culture are Andals followed by Northmen, again a large group has a unknown culture. From this it is apparent that most of the characters are found in the Andals and Northmen cultures, and makes the majority of the Game Of Thrones universe. Further, it should be noted that the universe contains a lot of small cultures such Children of the Forest. . The Andals are the people who invaded Westeros in the beginning of the universe, and are the dominant group. The Northmen are also a big cultural group defined by all the characters living in the North of the Game Of Thrones world. The Children of the Forest are a small group of characters which are presented fairly late in the series. They are small non-human characters, and should be the original people of Westeros. Further it should be noticed that the network contains a lot of different cultures. . It is further investigated how many of the characters that die through the series. We start out with 224 characters, and end up with only 30 characters being alive, whereas 8 is uncertain and 2 unkown. . This means that 121 characters dies throughout the series, and anyone who has seen the series would be able to confirm that a lot of characters die as the series progresses. In the figure below the distribution of the characters status can be seen. . . . Next we will dive into the last attribute for each character in the network, namely how many appearances the character has throughout the series. This will give us indication how often we in general will see a character but also present if there are any strict patterns. . . . Again, a lot of characters do not have this attribute on their character page, and these observations have been omitted in the figure above. We can see that the majority of the characters only appear a couple of times ie. below 10-15 apperances. This would make sense as a lot of the characters are not main characters and therefore only appear in a season or likewise. We can further see a little group around 40 appearances and 60 appearances which could indicate we have a little group of characters appearing in most episodes, which would be expected as the series have a couple of main characters. . Character dialogoues . Next we dive into the character dialogoues which are extracted from transcripts, this dataset contains dialogoues from all characters in the season, and this is based on another dataset than in the previous part of this page. Therefore we restrict the data to only contain data for the characters that are present in the network used for analysis in Text Analysis. . Originally the data contains 817 characters and the original dataset can be found here transcripts [ref]. . We are going to investigate how many episodes and series does each character appear in and also what is the average token length ie. how much dialogoue are present for each character as the dialogoue length could indicate the importance of a character. This is thought as a good approximation, as a character with a lot of dialogoue probably also are present a lot in the series and this could indicate the importance of the character. . . . From the figure above we can see that Tyrion Lannister clearly are the character with the longest dialogoue, which for anyone who has seen the series knows that Tyrion talks a lot and likes to talk. Next we can see that Jon Snow, Cersei Lannister and Daenerys Targaryen also has a lot of dialogoue. This makes sense as these three are part of the main characters, and appear in a lot of episodes. . Next we will dive into the characters appearances in seasons but also episodes, this is done by finding the episodes and series where they have some diaologoue and use this as indications of appearance. . . . From the figure above it can be seen that a lot of characters are present in all 8 season such as: Jon Snow, Sansa Stark, Tyrion Lannister, Bronn and Samwell Tarly and again this is expected as these characters are part of the key characters. On the other side a lot of characters are only present in 1 season such as Syrio Forel which is Arya Starks &quot;dancing teacher&quot; when she moves to King&#39;s Landing. . We will now investigate the appearance on episode level as this can give a more fine coarsed description of the character presence. . . . From this we can see that the character which appear in most episodes are Tyrion Lannister followed by Jon Snow, Sansa Stark, Daenerys Targaryen which makes perfect sense as these characters are main characters. Only a couple of characters are present only ones which clearly would indicate they had a small role in the Game Of Thrones plot. . Reviews and ratings . Lastly we will dive into the data from IMDB, where ratings and reviews are extracted. Here we will investigate how the rating distribution are in general, but also how it is distributed when taking the average rating pr. episode but also pr. season. . We will start out by looking at the average rating pr. season. From the figure below we can see that season 1 through season 7 have almost the same average rating, whereas season 8 clearly sticks out with a low score. Further it should be noticed that season 4 has the highest average rating of 9.31 which is quite high as the highest IMDB score are 10. Further it should be noticed that the season in general has a high average rating. . Season 8 having the lowest score does not come as a surprise as a lot of people were unhappy with the ending of the series, and a lot of people did feel that they just ended the series to quick. . . . Next we will look at the average rating pr. episode, to see if we could find any patterns. From the figure below we see approximately the same pattern as above, but we can now see that often the last 2 episodes in a season do achieve a higher average score compare to the middle episodes. Further it should be noticed that from the beginning of season 8 the episodes do keep getting lower average score, and the last episode in season 8 do achieve a quite low score of only 4. . . . what are the average review length . . . . . We will dive into the demographics of the reviewers of Game Of Thrones, to see if a specific group of people watch the series, as this could help us understand any patterns and let us dive deeper into the case. . The figure below shows the distribution of number of votes across 4 age groups and gender. From this it can be seen that males do vote more the females, and also the largest age is age 30-44 whereas the smallest are aged under 18. . . . We could now look into how the average rating was distributed across gender and age. From the figure below it can be seen that males across all age groups give approximately the same high average rating, whereas females in the age group under 18, give the lowest average rating. It should be noted that this age groups also was the smallest, so this score can easily be affected by fewer people giving low average rating compared to the other groups. . . . We have now investigated the data used in this project. How the attributes of the characters are distributed, and dived a little further into the Game Of Thrones universe. We have investigated the dialogoue of the character from transcripts, and seen how many episodes and seasons these characters are present, and further what their average dialogoue length was. Lastly, we have dived into the basics of the voters for the series, how the demographics of the voters were and their average rating. .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/02_Basic_Statistics/",
          "relUrl": "/02_Basic_Statistics/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Game Of Thrones Network Analysis",
          "content": "How is the network generated? . This section will explain the methodology to produce the network of Game Of Thrones characters. This section will be divided into two parts, as the first part generated the network across all season and the second part will explain how the network was generated for each season. . Part 1 . The character network describing interactions between the characters across all seasons will be described in this part. This part did scrape the Game Of Thrones Wiki-page, here the site contains a section for each season describing all the characters present in each season. By iterating through all these pages on the wiki-page it was possible to extract characters by the use of regular expressions. Having the list of each characters present across all seasons, the next task would be to extract information about each character, and find the links between all characters. . In the next part we did again utilize the Wiki-page of each character, again using the Game Of Thrones Wiki-page API to extract information of each character. Through the use of regular expressions it was possible to extract information about the allegiance, culture, religion, appearances and status of each character as this is listed in a fact-box on each character page (though some pages did not contain this information). Further, it was possible to find links between characters, as each page are linked to other characters that they somehow interact with. . As we wanted to emphasis on how strong the link was between individual characters, as some might only be connected once and therefore not have a very large impact, we did also save the frequency of each unique connection between characters. . The network information had now been collected so each character did have assigned the following attributes: . Allegiance | Culture | Religion | Status (dead, alive, uncertain) | Appearances | Which other characters it is linked to | Frequency of link | . We are now ready to generate the visualizations of the network, and this will be presented a little later in this section. . Part 2 . This part will explain how the networks were generated for each season, which would make it possible to investigate how the interactions between houses, cultures, characters etc. evovle through the series. Similar to the previous part we did utilize the Wiki-page API to iterate through each season and extract the characters present in each season. . When extracting information for each character present in each season we did not extract the whole character page but only the part describing their presence in each season. Each character page contains a fact-box, a short introduction, and then a couple of sections describing their presence in each season (if present in multiple seasons). This could be utilized to extract interactions for each season. . We did again include information about allegiance, culture and religion, which we did extract from the network generated in the previous part. Again the frequency of each link was included. . Degree distribution . The network across all season contains 162 nodes ie. characters which is linked by 3085 edges. Having generated the network we are going to investigate some of the properties of the network. . We are starting out by examining the degree distribution of the network, as the network is a directed network this would include both the in degree and out degree distribution. The in-degree is the number of inward edges from a node to the given node and vice versa for the out-degree. The degree describes the number of edges, and can contain information describing the characters connectiveness in the network. . . . From the figure above it can be seen that the in-degree and out-degree distribution are very similar, and appears to come from the same distribution. It should be noted from both the histogram and the boxplot that the in-degree distribution has more extreme point but at the same time has a lower median. Further it can be seen that the out-degree (ie. outgoing links) appear to have a higher peak around 5-9 degree compared to in-degree. It should also be noticed that the network is very dense, and all characters have at least a couple of other characters they interact with. From the degree distribution we can find the top-5 most connected characters based on in- and out-degree which is presented in the tables below. . . . From the table above it appears that Jon Snow are the most connected character based on in-degree. Also it should be noted that all five characters are main characters in Game Of Thrones, and therefore it would make sense that they are well connected in the network. Further, all but Eddard Stark are characters that are appearing in most episodes (see Basic Statistics). . Eddark Stark dies quite early in the series, and it might be a surprise that he is one of the most connected characters, but as this is based on in-degree this could be due to many of the others characters pages references Eddard. This would make sense as his children probably talks about him/mentions him and therefore make him very connected compared to many other characters. . Based on out-degree again Jon Snow is the most connected character, but we see that Eddard Stark, Daeneras Targaryen and Cersei Lannister are replaced by Sansa Stark, Arya Stark and Jamie Lannister which also are very well connected characters and also appears as main characters in the series. . Compare with a Random Network . Network graph . The network generated are now going to be presented in the interactive figure below. The network contains multiple settings for the user to choose. Firstly, it is possible to choose whether the network should be based on all text based from the character pages ie. all season, or whether the user wants to inspect the network based on a separate season. Further, different overlays can be chosen based on the character attributes namely: religion, allegiance, culture, appearances or status. . When selecting a character one will be presented with an image of the character, and a short description of the character attributes, a link to the wiki-page and the most frequent words used by the character based on TF-IDF which will be explained in the Text Analysis section. . Attribute relationships . Next we are going to investigate how the attributes relate and interact with each other, also it could be that some eg. religions are more well connected than others. We will start out by examining the allegiance attribute. . . . The figure above shows the top 10 most connected allegiances in Game Of Thrones, and it can clearly be seen that House Stark is the most connected allegiance, but a lot of the connectivity derives from the interaction with their own allegiance. Further, it can be seen that House Stark are well connected with House Lannister, Night&#39;s Watch and House Bolton. The connection with House Lannister and Night&#39;s Watch can easily be explained by eg. Ned Starks work as the Kings Hand but also Sansa Stark being married with Joffrey. Further, Jon Snow from the House Stark allegiance are becoming part of Night&#39;s Watch can explain this interaction. . Generally, it can also be seen that the allegiances interacts with it-self most, compared to interaction with other allegiances. . Next, we will look into how the religions interact, and from the figure below, it can clearly be seen that the two main religions are the religions that mainly interact with each other, which does not come as a surprise. . . . In the figure below, the connection between cultures are investigated. Here it can be seen that the Andals are the most connected culture, followed by Northmen, further it can be seen that these two cultures interact alot. . Further, it can be seen that the third most connected culture are Valyrians which does not mainly interact with themselves, but instead are most connected to Andals. . . . Network assortivity and centrality . In this section we are going to investigate some of the network properties of the character network across all seasons. In order to further investigate network properties we are going to compute assortivity and centrality of the network. . From the table below it can be seen that culture has the highest assortivity score, which would indicate that this attribute are the best to distinquish the characters from each other. It should be noted that none of the scores are very high indicating, that the characters are linked in a more complex pattern, or based on another attribute. . TODO EN FORKLARING PÅ DET HER . . . Centralitiy . Most connected characters . In this section we are going to investigate which characters are the most connected characters in each season utilizing the networks for each season. This will be done based on in- and out-degree as in one of the earlier sections in this part of the website. . . . . . . . . . . . Subconclusion . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/GameOfThronesNetwork/",
          "relUrl": "/GameOfThronesNetwork/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Text analysis",
          "content": "This section regarding text analysis is divided into two parts: namely wordclouds and sentiment analysis. Both the extracted wiki pages and the character dialogues will be used and it will be investigated how wordclouds and sentiment analysis will differ based on the two different data sets. . Wordclouds . First, we will take a look at word clouds. As mentioned before, both the extracted wiki pages and the full series dialogue will be investigated. We will start by generating wordclouds for characters of interest. Here, we have selected the characters: Jon Snow, Arya Stark, Bronn, Brienne of Tarth and Jaime Lannister. The first step in generating the wordclouds is to compute the term frequeny-inverse document frequency (TF-IDF) for our respective text corpus, i.e. the wiki pages and episode dialogues. For further explanation of the TF-IDF and it&#39;s computation we refer to the Explainer Notebook. . Now, let&#39;s take a look at the generated wordclouds for the selected characters. . Wordclouds based on character wiki page &amp; dialgue&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; When comparing the generated wordclouds for the respective data sets it should be noted, that the same words are, for the most part, not present for the respective characters. This is expected as one would imagine that the text from the characters wikipedia pages are more descriptive of the character and their place in the story whereas the wordcloud from the dialogue is exactly that; their most descrriptive words according to TF-IDC used throughout the series. This would be interesting to compare with sentiment analysis which is the second part of this page. . Wordclouds based on selected houses . Next, we will generate wordclouds based on the characters allegiance. This will be done by pooling the wiki text of characters belonging to the same allegiance together and, again, compute the respective TF-IDF score in order to generate the wordclouds. For this, we have selected the houses: Stark, Lannister, Targaryen, Greyjoy and the independant group The Night&#39;s Watch. It would be interesting to see, if the houses mottos would appear in these word clouds. The respective house mottos are: . House Stark: Winter is coming House Lannister: Hear Me Roar! House Targaryen: Fire and Blood House Greyjoy: We Do Not Sow . As the Night&#39;s Watch is not a House but rather a brotherhood sworn to protect The Wall, they do not have a motto. . When looking at the wordclouds above and the respective house mottos, only the Starks&#39; Winter (small, bottom right) and the Lannisters&#39; Hear (big, middle) are present. All the wordclouds are, however, very descriptive of the respective houses. For instance for the Night&#39;s Watch, a military order sworn to protect The Wall, words like protect, wildling and swear are present. The same can be said for House Targaryan, where the main Targaryan character, Daenerys, is married to a dothraki warlord and later in the show, is a leader of dothraki people herself. . Wordclouds based on seasons . Sentiment of characters &lt;/h3&gt;&lt;/p&gt; In this second part of text analysis, we will do a sentiment analysis of ther characters, again, based on both their wiki-pages and their dialogue in the series.As we saw in the wordclouds of the selected characters, there was quite a difference in the wordclouds based on the respective wiki-pages and character dialogue. It would be interesting to look at, if this also result in a different sentiment level of the character. Additionally, we will also do a sentiment analysis of the different seasons of the series. Perhaps it can be determined if any of the seasons were significantly different on a sentiment based level. . For the sentiment analysis, we will apply both the dictionary based method of LabMT and the rule- and dictionary-based method of VADER. For further explanation of how these sentiment scores are computed and the difference between the two methods, we again refer to the Explainer Notebook. It should be noted that the score of the two methods differ, as the LabMT score sentiment on a scale from [1:9], while VADER scores on the range [-1:1]. For LabMT, a score of 5 is considered neutral while a score within the range [-0.05:0.05] is considered neutral for VADER. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Sentiment analysis of character dialogue . . . Sentiment analysis on character wiki pages . sadest_VADER.reverse(),sadest_LabMT.reverse() plot_dict_vader = {key: char_sentiment_VADER[key] for key in happiest_VADER+sadest_VADER} plot_dict_LabMT = {key: char_sentiment_LabMT[key] for key in happiest_LabMT+sadest_LabMT} fig = plot_VADER_LabMT_scores(plot_dict_vader, plot_dict_LabMT) fig.show() . . . Sentiment analysis on the series&#39; seasons . char_season_wiki = {} base_path = &quot;/work/got2/s&quot; for s in range(1,9): txt = [] files = os.listdir(base_path + str(s)+&quot;_cleaned/&quot;) for file in files: with open(&#39;/work/got2/s&#39;+str(s)+&quot;_cleaned/&quot;+ file, &quot;r&quot;) as text_file: tmp = text_file.readlines() txt.extend(tmp) char_season_wiki[&quot;s&quot;+str(s)] = txt . tokens_LabMT = {char : [lemmatizer.lemmatize(word) for word in word_tokenize(&quot; &quot;.join(text).lower())] for char, text in char_season_wiki.items()} tokens_VADER = char_season_wiki #Suprress warnings: warnings.filterwarnings(&quot;ignore&quot;) #Compute sentiment for each character: char_sentiment_LabMT = {char :sentiment_LabMT(tokens_values) for char, tokens_values in tokens_LabMT.items() } char_sentiment_VADER = {char :sentiment_VADER(tokens_values) for char, tokens_values in tokens_VADER.items() } #Sort and find the top 10 happiest and sadest: happiest_VADER = sorted(char_sentiment_VADER, key = lambda i: char_sentiment_VADER[i],reverse = True)[:3] happiest_LabMT = sorted(char_sentiment_LabMT, key = lambda i: char_sentiment_LabMT[i],reverse = True)[:3] sadest_VADER = sorted(char_sentiment_VADER, key = lambda i: char_sentiment_VADER[i],reverse = False)[:3] sadest_LabMT = sorted(char_sentiment_LabMT, key = lambda i: char_sentiment_LabMT[i],reverse = False)[:3] print(&#39;Happiest based on VADER: &#39;,happiest_VADER) print(&#39;Happiest based on LabMT: &#39;,happiest_LabMT) print(&#39;Sadest based on VADER: &#39;,sadest_VADER) print(&#39;Sadest based on LabMT: &#39;,sadest_LabMT) . Happiest based on VADER: [&#39;s3&#39;, &#39;s2&#39;, &#39;s4&#39;] Happiest based on LabMT: [&#39;s1&#39;, &#39;s3&#39;, &#39;s6&#39;] Sadest based on VADER: [&#39;s8&#39;, &#39;s7&#39;, &#39;s5&#39;] Sadest based on LabMT: [&#39;s8&#39;, &#39;s7&#39;, &#39;s4&#39;] . Dispersion plot &lt;/h3&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . &lt;/img&gt; Created in Deepnote . &lt;/div&gt; .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/textanalysis/",
          "relUrl": "/textanalysis/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Community Analysis",
          "content": "This section contains three parts: the first part we will explain how we generate the communities and investigate the basics of the communities. Next we will investigate the language used by these communities, namely find the words with the highest TF-IDF. Lastly, we are going to investigate the sentiment of these communities. . Community detection . In this section, we will find communities in the Game of Thrones network. These communities are identified using the Louvain Algorithm. Further explanation of the Lovain Algorithm can be found in the explainer notebook INDSÆT RIGTIG LINK. In total, six communities are identified with a modularity value of 0.31. Below, some exploratory analysis can be seen of these 6 communities using the character attributes religion, culture and allegiance. . From the figure below the size of each community are presented. From this it is clear that Community 1 are the largest community. Whereas Community 0 is the smallest. . . . The five two communities: [1, 3] . Next, we will investigate what religions, cultures and allegiances each community contains, as this can help us understand what the Louvain algorithm have chosen in order to split the characters into the different communities. We will start out by looking into religion. . . . From the above we can notice that Community 0 are contains equal parts of characters being part of Faith of the Seven religion and Drowned God, whereas Community 1 mainly contain characters being part of Faith of the Seven. . Community 0 could therefore be expected to contain people from the Iron Island and as well from Kings Landing, whereas Community 1 contains primarily people from Faith of the Seven, and 1 from the Old Gods of the Forest, this could maybe be people being from House Lannister and Sansa Stark as these characters are very well connected in large parts of the story. . Next, in Community 2 this are rather mixed from Great Stallion, Old Gods of the Forest, Faith of the Seven and Ghiscari, this could maybe be the characters surrounding Daenarys Targaryen, as her group are a rather mixed group. . The next three communities are also rather mixed, and could represent multiple groups of characters, and this pattern are rather complicated to decrypt. . . . From the figure above it can be seen that the communities are very mixed when it comes to allegiance, which would be expected as the Game Of Thrones universe contains a lot of different allegiances, and these are mixing up together. Eg. the people from the North are part of many different allegiances, but are grouping together when needed for eg. war. . One could see that the largest allegiance in community 1 are House Lannister, but also contains Petyr Baelish, Kingsguard, Sparrows, House Clegane etc., and this community appears to describe the important people from Kings Landing. . Community 2 are described by House Targaryen, Second Sons, Unsullied, Drogo and could describe the group sorounding Daenarys Targaryen. . Community 3 are described by House Umber, Free Folk, Night&#39;s Watch and White Walkers, maybe this community describes the people interacting at the Wall and behind. This could explain this group of allegiances. . . . Lastly, we are looking into what culture each community contains. Here it can be seen that the Andals are the largest in Community 1, 3, and 5. This would be expected as this is the largeset cultural group in Game Of Thrones. . Community 2 contains large group of Dothraki people, and this again underlines that community 2 could be the group of characters soround Daenarys. . Similarly, we see that community 3 contains Free Folk, Northmen, White Walkers, Children of the Forest, which could indicate the people at the Wall and beyond. . TF-IDF and wordclouds . As in the Text Analysis section, we will compute TF-IDF for each community, which can help us investigate the properties of the different communities. . As each community consist of different characters, and we know which words each character are described by from its character page on the Wiki-page. From this we can thereby first compute the TF-for each community, and afterwards compute IDF for all the words used across the communities. From these computations we can now compute the TF-IDF. To see the full computations of the TF-IDF these can be found in the Explainer Notebook. . The computed TF-IDF are used to size the words when visualizing the words describing each community. The results of the analysis are presented in the figure below. . Sentiment analysis . . . link_partition . {0: [&#39;Obara_Sand&#39;, &#39;Doran_Martell&#39;, &#39;Ellaria_Sand&#39;, &#39;Euron_Greyjoy&#39;, &#39;Myrcella_Baratheon&#39;, &#39;Nymeria_Sand&#39;, &#39;Oberyn_Martell&#39;, &#39;Tyene_Sand&#39;, &#39;Balon_Greyjoy&#39;, &#39;Areo_Hotah&#39;, &#39;Trystane_Martell&#39;, &#39;Yara_Greyjoy&#39;, &#39;Aeron_Greyjoy&#39;], 1: [&#39;Bronn&#39;, &#39;Cersei_Lannister&#39;, &#39;Jaime_Lannister&#39;, &#39;Olenna_Tyrell&#39;, &#39;Tyrion_Lannister&#39;, &#39;Varys&#39;, &#39;Hallyne&#39;, &#39;Pycelle&#39;, &#39;Podrick_Payne&#39;, &#39;Sansa_Stark&#39;, &#39;Renly_Baratheon&#39;, &#39;Gregor_Clegane&#39;, &#39;Joffrey_Baratheon&#39;, &#39;Loras_Tyrell&#39;, &#39;Mace_Tyrell&#39;, &#39;Olyvar&#39;, &#39;Qyburn&#39;, &#39;Shae&#39;, &#39;Tommen_Baratheon&#39;, &#39;Tywin_Lannister&#39;, &#39;Dickon_Tarly&#39;, &#39;Yohn_Royce&#39;, &#39;Anya_Waynwood&#39;, &#39;Lysa_Arryn&#39;, &#39;Marillion&#39;, &#39;Petyr_Baelish&#39;, &#39;Robin_Arryn&#39;, &#39;Daisy&#39;, &#39;Armeca&#39;, &#39;Ros&#39;, &#39;Meryn_Trant&#39;, &#39;Dontos_Hollard&#39;, &#39;Ilyn_Payne&#39;, &#39;Margaery_Tyrell&#39;, &#39;Harry_Strickland&#39;, &#39;Kevan_Lannister&#39;, &#39;Lancel_Lannister&#39;, &#39;Randyll_Tarly&#39;, &#39;Mordane&#39;, &#39;Shagga&#39;, &#39;Tycho_Nestoris&#39;, &#39;Unella&#39;, &#39;Septa&#39;], 2: [&#39;Daenerys_Targaryen&#39;, &#39;Viserys_Targaryen&#39;, &#39;Eddard_Stark&#39;, &#39;Robert_Baratheon&#39;, &#39;Grey_Worm&#39;, &#39;Barristan_Selmy&#39;, &#39;Daario_Naharis&#39;, &#39;Jorah_Mormont&#39;, &#39;Missandei&#39;, &#39;Rhaegar_Targaryen&#39;, &#39;Qhono&#39;, &#39;Drogo&#39;, &#39;Moro&#39;, &#39;Qotho&#39;, &#39;Doreah&#39;, &#39;Irri&#39;, &#39;Mirri_Maz_Duur&#39;, &#39;Lyanna_Stark&#39;, &#39;Jory_Cassel&#39;, &#39;Hizdahr_zo_Loraq&#39;, &#39;Kovarro&#39;, &#39;Kraznys_mo_Nakloz&#39;, &#39;Pyat_Pree&#39;, &#39;Rakharo&#39;, &#39;Xaro_Xhoan_Daxos&#39;], 3: [&#39;Stannis_Baratheon&#39;, &#39;Eddison_Tollett&#39;, &#39;Alliser_Thorne&#39;, &#39;Craster&#39;, &#39;Gilly&#39;, &#39;Grenn&#39;, &#39;Janos_Slynt&#39;, &#39;Jeor_Mormont&#39;, &#39;Jon_Snow&#39;, &#39;Karl_Tanner&#39;, &#39;Mance_Rayder&#39;, &#39;Meera_Reed&#39;, &#39;Melisandre&#39;, &#39;Ned_Umber&#39;, &#39;Night_King&#39;, &#39;Olly&#39;, &#39;Pypar&#39;, &#39;Qhorin&#39;, &#39;Rast&#39;, &#39;Samwell_Tarly&#39;, &#39;Tormund&#39;, &#39;Shireen_Baratheon&#39;, &#39;Benjen_Stark&#39;, &#39;Ygritte&#39;, &#39;Aemon&#39;, &#39;Selyse_Baratheon&#39;, &#39;Orell&#39;, &#39;Styr&#39;, &#39;Leaf&#39;], 4: [&#39;Ramsay_Bolton&#39;, &#39;Theon_Greyjoy&#39;, &#39;Bran_Stark&#39;, &#39;Locke&#39;, &#39;Roose_Bolton&#39;, &#39;Greatjon_Umber&#39;, &#39;Brynden_Tully&#39;, &#39;Osha&#39;, &#39;Robb_Stark&#39;, &#39;Rodrik_Cassel&#39;, &#39;Walder_Frey&#39;, &#39;Catelyn_Stark&#39;, &#39;Rickon_Stark&#39;, &#39;Alys_Karstark&#39;, &#39;Robett_Glover&#39;, &#39;Hodor&#39;, &#39;Jojen_Reed&#39;, &#39;Luwin&#39;, &#39;Wolkan&#39;, &#39;Ebrose&#39;, &#39;Myranda&#39;, &#39;Order_of_Maesters&#39;, &#39;Alton_Lannister&#39;, &#39;Edmure_Tully&#39;, &#39;Rickard_Karstark&#39;, &#39;Walder_Rivers&#39;, &#39;Black_Lorren&#39;, &#39;Dagmer&#39;, &#39;Talisa_Stark&#39;], 5: [&#39;Rorge&#39;, &#39;Amory_Lorch&#39;, &#39;Arya_Stark&#39;, &#39;Biter&#39;, &#39;Hot_Pie&#39;, &#34;Jaqen_H&#39;ghar&#34;, &#39;Polliver&#39;, &#39;Thoros&#39;, &#39;Yoren&#39;, &#39;Beric_Dondarrion&#39;, &#39;Brienne_of_Tarth&#39;, &#39;Davos_Seaworth&#39;, &#39;Lyanna_Mormont&#39;, &#39;Sandor_Clegane&#39;, &#39;Syrio_Forel&#39;, &#39;Lady_Crane&#39;, &#39;Izembaro&#39;, &#39;Anguy&#39;, &#39;Lommy&#39;, &#39;Ray&#39;, &#39;Salladhor_Saan&#39;, &#39;Matthos_Seaworth&#39;, &#39;Gendry_Baratheon&#39;]} . com1 = G.subgraph(link_partition[0]) com2 = G.subgraph(link_partition[1]) com3 = G.subgraph(link_partition[2]) com4 = G.subgraph(link_partition[3]) com5 = G.subgraph(link_partition[4]) nx.draw(com5, with_labels = True) . https://en.wikipedia.org/wiki/PageRank . Evt bruge googles gamle ranking algoritme til at se, hvem der er den vigtigste karakter i hver Community . def pagerank(M, num_iterations: int = 100, d: float = 0.85): &quot;&quot;&quot;PageRank: The trillion dollar algorithm. Parameters - M : numpy array adjacency matrix where M_i,j represents the link from &#39;j&#39; to &#39;i&#39;, such that for all &#39;j&#39; sum(i, M_i,j) = 1 num_iterations : int, optional number of iterations, by default 100 d : float, optional damping factor, by default 0.85 Returns - numpy array a vector of ranks such that v_i is the i-th rank from [0, 1], v sums to 1 &quot;&quot;&quot; N = M.shape[1] v = np.random.rand(N, 1) v = v / np.linalg.norm(v, 1) M_hat = (d * M + (1 - d) / N) for i in range(num_iterations): v = M_hat @ v return v . adj_mat = nx.linalg.graphmatrix.adjacency_matrix(com1).todense() pagerank(adj_mat) . matrix([[1.93129078e+110], [1.89986439e+110], [3.67006629e+110], [3.98859259e+109], [2.01611432e+110], [1.11686391e+110], [6.03381714e+109], [3.21994499e+110], [2.74202964e+110], [6.02246755e+109], [2.76478821e+110], [2.72584660e+110], [1.99113837e+110]]) .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/CommunityAnalysis/",
          "relUrl": "/CommunityAnalysis/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Explainer Notebook",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/Explainer_Notebook/",
          "relUrl": "/Explainer_Notebook/",
          "date": ""
      }
      
  

  

  
      ,"page7": {
          "title": "",
          "content": ". of the website . The website contains 6 sections. The first section The Data describes the data, where it is found, and briefly what it is used for. The next section performs an initial exploratory analysis of the data. The third section performs an analysis of the Game Of Thrones networks describing how the characters interact. The next part performs text analysis of the character dialogoues but also the text from the character wiki-pages. The fifth section detects communities in the network, and perform analysis on these. The last section ... . Lastly, the analysis performed throughout the website can be found in the explainer notebook if one want&#39;s to dig into all the details. If one want&#39;s to replicate the analysis the data can be downloaded in the data section. . The Data | Basic Statistics of the Data | The Game of Thrones Network | Text Analysis | Community Detection | Explainer Notebook | . Aim of project . The Game of Thrones series recieved world-wide rekognition and is the most watched series to date. It takes place in a mediaval fantasy universe and introduces many characters with complicated relations. The goals of this project is to try and answer, who was actually the main character throughout the seasons and if it possible to find a pattern in all these character relations. We will also investigate the overall themes of the series and if these changes over the course of the show. . TO DO IMDB . To sum it up, this project will try to answer the following: . Who is the main characters of each season of the series? | Is it possible to find a pattern in the data that helps understand the complicated world of Westeros? | Is the theme of the Game of Thrones series consistent throughout the show or does it change during it&#39;s course? | . The following video is a short presentation of the aim of the project: . . The Game of Thrones Universe . The Game of Thrones is based on the book series A Song of Ice and Fire written by George R. R. Martin and takes place in the mediaval fantasy world of Westeros and Essos. During the show, the viewer follow multiple story arcs: A succesion war amongst the houses of Westeros as the king, Robert Baratheon, dies and doubt of the legitimacy of his childrens claim to the throne arises. Another arc takes place in the northern most part of Westeros, where the Night Watch have guarded the Wall keeping the Seven Kingdoms safe for centuries. And a third arc, where the viewers follow an exiled princess who wishes to reconquer The Seven Kingdoms and reclaim her birth right, the Iron Throne. . . The Website . This website is built using the blogging template fastpages built by fastai. It uses GitHub actions to create Jekyll blog posts on GitHub Pages by converting jupyter notebooks to html$^1$ . &lt;/img&gt; Created in Deepnote .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mikkelmathiasen23.github.io/GameOfThrones_Network/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}